with open('file.txt', 'w') as f:
     f.write('hello')


                                    Преимущества
Из этого следует, что контекстный менеджер используется для обязательного выполнения каких-либо 
действий до входа в блок и после выхода из него

class Hello:
    def __del__(self):
        print u'деструктор'
    def __enter__(self):
        print u'вход в блок'
    def __exit__(self, exp_type, exp_value, traceback):
        print u'выход из блока

with Hello():
     print u'мой код'

вход в блок
мой код
выход из блока
деструктор


Мы увидели, что произошел гарантированный выход из блока после выполнения нашего кода.

!!!как работает под капотом!!!

Но yield нельзя было использовать внутри try-finally в 2.4 и раньше. И немного странно использовать loop для чего-то, что вы хотите выполнить один раз.

Поэтому, после рассмотрения нескольких вариантов, Гвидо Ван Россум и python-dev команда наконец решили использовать объект вместо генератора, чтобы контролировать поведение данного кода:

Теперь, когда "with" выражение исполняется, Python исполняет выражение, вызывает метод __enter__ с полученным значением (которое называется "context guard"), затем присваивает переменной переданной словом as (в данном случае thing) то, что возвращает метод __enter__. Далее, Python исполняет тело (в данное случае some code), и в любом случае вызывает метод __exit__.



В стандартную библиотеку Python входит модуль contextlib, который содержит утилиты для построения и работы с контекстными менеджерами.

Рассмотрим только один инструмент из всего набора – contextmanager. contextmanager используется как декоратор для функции, превращая ее в контекстный менеджер. При этом схема конструирования такая: все, что написано до оператора yield вызывается в рамках функции __enter__, а все что после – в рамках __exit__.

СОЗДАНИЕ СОБСТВЕННОГО МЕНЕДЖЕРА

from contextlib import contextmanager

@contextlib.contextmanager
def context():
    print u'вход в блок'
    try:
        yield {}
    except RuntimeError, err:
        print 'error: ', err
    finally:
        print u'выход из блока'

with context() as fp:
     print u'блок'

Вывод:
    вход в блок
    блок
    выход из блока

ПРИМЕРЫ ИСПОЛЬЗОВАНИЯ:

Шаблон для фиксации или отката транзакции базы данных