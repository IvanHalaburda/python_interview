По одной из классификаций все типы данных в Python делятся на атомарные и ссылочные.

Атомарные:

числа;
строки;

Ссылочные:

списки;
кортежи;
словари;
функции;
классы;
Разница между этими двумя группами уходит глубоко в корни языка. Вкратце:

Атомарные объекты, при их присваивании, передаются по значению, а ссылочные — по ссылке


									Типы данных

Изменяемые: список, словарь, множество
Неизменяемые: числа(int,float,complex), булиевы переменные, кортеж, frozenset

int

float

complex: z = complex(1,2) (z.real == 1.0, z.imag == 2.0) операции сравнения для них не определены

bool

Последовательности

str(неизменяемая последовательность)

list

tuple

dict

set уникальные элементы

frozenset

еще можно отнести файл, range, none

пример isinstance():
num = 4.44
print(isinstance(num, float))

> True

Важным отличием также является то, что isinstance() "знает" о наследовании. Функция воспринимает объект производного класса, как объект базового.

для type() производный класс есть производный.


При инициализации переменной, на уровне интерпретатора, происходит следующее:

создается целочисленный объект 5 (можно представить, что в этот момент создается ячейка и 5 кладется в эту ячейку);
данный объект имеет некоторый идентификатор, значение: 5, и тип: целое число;
посредством оператора “=” создается ссылка между переменной b и целочисленным объектом 5 (переменная b ссылается на объект 5).