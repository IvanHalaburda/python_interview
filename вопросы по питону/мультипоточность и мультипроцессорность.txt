Multithreading is a program execution technique that allows a single process to have multiple code segments (like threads).

A multiprocessing system has more than two processors whereas Multithreading is a program execution technique that allows a single process to have multiple code segments
		
									GIL

The Python Global Interpreter Lock or GIL, in simple words, is a mutex (or a lock) that allows only one thread to hold the control of the Python interpreter.

This means that only one thread can be in a state of execution at any point in time.		

							Зачем нужен GIL

Так как в питоне для управления памятью используется метод подсчета ссылок, чтобы количество ссылок на несуществующий объект не было больше 0 или на существующий объект число ссылок не оказалось меньше одного питон блокирует выполнение более чем одного процесса одновременно

Это понадобилось на заре эпохи пайтон, было много библиотек на Си, чтобы обеспечить корректную работу каждой из них (однопоточной, многопоточной ...) был введен GIL. А так как следить надо было только за работой лишь одного потока, то скорость работы однопоточных программ была высока.

Если программе нужны операции связанные с вводом/выводом, то GIL на времени работы сильно не сказывается, т.к. такие проги обычно ожидают ввода/вывода и в это время выполняется другой поток.
Но если в проге выполняются процессы, требующие вычислений с процессора, то тут джил прилично увеличивает время выполнения проги

Но тут есть одна проблема. Почти всегда GIL занимается процессорными потоками и остальные потоки не успевают занять место

Проблема была решена в Python 3.2 в 2009 разработчиком Antoine Pitrou. Он добавил механизм подсчёта потоков, которые нуждаются в GIL. И если есть другие потоки, нуждающиеся в GIL, текущий поток не занимал бы их место.

Все предложения по замене GIl либо ломали существующие библиотеки на С,  либо уменьшали скорость работы однопоточных программ, а это Гвидо ван россум признал недопустимым

Вариант обхода - это много процессорность. Каждый процесс получает свой интерпретатор и область памяти (модуль multiprocessing). Прирост в скорости есть, но за это платишь увеличенным потреблением памяти.

По факту, многопоточность нужна не так уж и часто.

Можно сменить интерпретатор с CPython(оригинальный с GIL) на Jython, IronPython and PyPy, written in C, Java, C#. Но не все библиотеки там работают

НЕ ЗАКОНЧЕНО